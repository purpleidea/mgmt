// Mgmt
// Copyright (C) James Shubin and the project contributors
// Written by James Shubin <james@shubin.ca> and the project contributors
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Additional permission under GNU GPL version 3 section 7
//
// If you modify this program, or any covered work, by linking or combining it
// with embedded mcl code and modules (and that the embedded mcl code and
// modules which link with this program, contain a copy of their source code in
// the authoritative form) containing parts covered by the terms of any other
// license, the licensors of this program grant you additional permission to
// convey the resulting work. Furthermore, the licensors of this program grant
// the original author, James Shubin, additional permission to update this
// additional permission if he deems it necessary to achieve the goals of this
// additional permission.

// Code generated by goyacc -v parser/y.output -o parser/y.go parser/parser.y. DO NOT EDIT.

//line parser/parser.y:31
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:31

import (
	"fmt"
	"strings"

	"github.com/purpleidea/mgmt/lang/ast"
	"github.com/purpleidea/mgmt/lang/funcs"
	"github.com/purpleidea/mgmt/lang/funcs/operators"
	"github.com/purpleidea/mgmt/lang/interfaces"
	"github.com/purpleidea/mgmt/lang/types"
	"github.com/purpleidea/mgmt/util"
)

const (
	errstrParseAdditionalEquals = "additional equals in bind statement"
	errstrParseExpectingComma   = "expecting trailing comma"
)

func init() {
	yyErrorVerbose = true // set the global that enables showing full errors
}

//line parser/parser.y:55
type yySymType struct {
	yys int
	row int
	col int

	//err error // TODO: if we ever match ERROR in the parser

	bool  bool
	str   string
	int   int64 // this is the .int as seen in lexer.nex
	float float64

	typ *types.Type

	stmts []interfaces.Stmt
	stmt  interfaces.Stmt

	exprs []interfaces.Expr
	expr  interfaces.Expr

	mapKVs []*ast.ExprMapKV
	mapKV  *ast.ExprMapKV

	structFields []*ast.ExprStructField
	structField  *ast.ExprStructField

	args []*interfaces.Arg
	arg  *interfaces.Arg

	resContents []ast.StmtResContents // interface
	resField    *ast.StmtResField
	resEdge     *ast.StmtResEdge
	resMeta     *ast.StmtResMeta

	edgeHalfList []*ast.StmtEdgeHalf
	edgeHalf     *ast.StmtEdgeHalf
}

const OPEN_CURLY = 57346
const CLOSE_CURLY = 57347
const OPEN_PAREN = 57348
const CLOSE_PAREN = 57349
const OPEN_BRACK = 57350
const CLOSE_BRACK = 57351
const IF = 57352
const ELSE = 57353
const FOR = 57354
const FORKV = 57355
const BOOL = 57356
const STRING = 57357
const INTEGER = 57358
const FLOAT = 57359
const EQUALS = 57360
const DOLLAR = 57361
const COMMA = 57362
const COLON = 57363
const SEMICOLON = 57364
const ELVIS = 57365
const DEFAULT = 57366
const ROCKET = 57367
const ARROW = 57368
const DOT = 57369
const BOOL_IDENTIFIER = 57370
const STR_IDENTIFIER = 57371
const INT_IDENTIFIER = 57372
const FLOAT_IDENTIFIER = 57373
const MAP_IDENTIFIER = 57374
const STRUCT_IDENTIFIER = 57375
const VARIANT_IDENTIFIER = 57376
const IDENTIFIER = 57377
const CAPITALIZED_IDENTIFIER = 57378
const FUNC_IDENTIFIER = 57379
const CLASS_IDENTIFIER = 57380
const INCLUDE_IDENTIFIER = 57381
const IMPORT_IDENTIFIER = 57382
const AS_IDENTIFIER = 57383
const COMMENT = 57384
const ERROR = 57385
const COLLECT_IDENTIFIER = 57386
const PANIC_IDENTIFIER = 57387
const AND = 57388
const OR = 57389
const LT = 57390
const GT = 57391
const LTE = 57392
const GTE = 57393
const EQ = 57394
const NEQ = 57395
const PLUS = 57396
const MINUS = 57397
const MULTIPLY = 57398
const DIVIDE = 57399
const NOT = 57400
const IN = 57401

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"OPEN_CURLY",
	"CLOSE_CURLY",
	"OPEN_PAREN",
	"CLOSE_PAREN",
	"OPEN_BRACK",
	"CLOSE_BRACK",
	"IF",
	"ELSE",
	"FOR",
	"FORKV",
	"BOOL",
	"STRING",
	"INTEGER",
	"FLOAT",
	"EQUALS",
	"DOLLAR",
	"COMMA",
	"COLON",
	"SEMICOLON",
	"ELVIS",
	"DEFAULT",
	"ROCKET",
	"ARROW",
	"DOT",
	"BOOL_IDENTIFIER",
	"STR_IDENTIFIER",
	"INT_IDENTIFIER",
	"FLOAT_IDENTIFIER",
	"MAP_IDENTIFIER",
	"STRUCT_IDENTIFIER",
	"VARIANT_IDENTIFIER",
	"IDENTIFIER",
	"CAPITALIZED_IDENTIFIER",
	"FUNC_IDENTIFIER",
	"CLASS_IDENTIFIER",
	"INCLUDE_IDENTIFIER",
	"IMPORT_IDENTIFIER",
	"AS_IDENTIFIER",
	"COMMENT",
	"ERROR",
	"COLLECT_IDENTIFIER",
	"PANIC_IDENTIFIER",
	"AND",
	"OR",
	"LT",
	"GT",
	"LTE",
	"GTE",
	"EQ",
	"NEQ",
	"PLUS",
	"MINUS",
	"MULTIPLY",
	"DIVIDE",
	"NOT",
	"IN",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser/parser.y:1558

// pos is a helper function used to track the position in the parser.
func pos(y yyLexer, dollar yySymType) {
	lp := cast(y)
	lp.row = dollar.row
	lp.col = dollar.col
	// FIXME: in some cases the before last value is most meaningful...
	//lp.row = append(lp.row, dollar.row)
	//lp.col = append(lp.col, dollar.col)
	//log.Printf("parse: %d x %d", lp.row, lp.col)
	return
}

// cast is used to pull out the parser run-specific struct we store our AST in.
// this is usually called in the parser.
func cast(y yyLexer) *lexParseAST {
	x := y.(*Lexer).parseResult
	return x.(*lexParseAST)
}

// locate should be called after creating AST nodes from lexer tokens to store
// the positions of the involved tokens in the AST node.
func locate(y yyLexer, first yySymType, last yySymType, node interface{}) {
	pos(y, last)
	// Only run Locate on nodes that look like they have not received
	// locations yet otherwise the parser will come back and overwrite them
	// with invalid ending positions.
	if pn, ok := node.(interfaces.PositionableNode); !ok {
		return
	} else if !pn.IsSet() {
		pn.Locate(first.row, first.col, last.row, last.col)
	}
}

// posLast runs pos on the last token of the current stmt/expr.
func posLast(y yyLexer, dollars []yySymType) {
	// pick the last token in the set matched by the parser
	pos(y, dollars[len(dollars)-1]) // our pos
}

// cast is used to pull out the parser run-specific struct we store our AST in.
// this is usually called in the lexer.
func (yylex *Lexer) cast() *lexParseAST {
	return yylex.parseResult.(*lexParseAST)
}

// pos is a helper function used to track the position in the lexer.
func (yylex *Lexer) pos(lval *yySymType) {
	lval.row = yylex.Line()
	lval.col = yylex.Column()
	// TODO: we could use: `s := yylex.Text()` to calculate a delta length!
	//log.Printf("lexer: %d x %d", lval.row, lval.col)
}

// Error is the error handler which gets called on a parsing error.
func (yylex *Lexer) Error(str string) {
	lp := yylex.cast()
	if str != "" {
		// This error came from the parser. It is usually also set when
		// the lexer fails, because it ends up generating ERROR tokens,
		// which most parsers usually don't match and store in the AST.
		err := ErrParseError // TODO: add more specific types...
		if strings.HasSuffix(str, ErrParseAdditionalEquals.Error()) {
			err = ErrParseAdditionalEquals
		} else if strings.HasSuffix(str, ErrParseExpectingComma.Error()) {
			err = ErrParseExpectingComma
		} else if strings.HasPrefix(str, ErrParseSetType.Error()) {
			err = ErrParseSetType
		}
		lp.parseErr = &LexParseErr{
			Err: err,
			Str: str,
			// FIXME: get these values, by tracking pos in parser...
			// FIXME: currently, the values we get are mostly wrong!
			Row: lp.row, //lp.row[len(lp.row)-1],
			Col: lp.col, //lp.col[len(lp.col)-1],
		}
	}
}

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 136,
	48, 0,
	49, 0,
	50, 0,
	51, 0,
	52, 0,
	53, 0,
	-2, 56,
	-1, 137,
	48, 0,
	49, 0,
	50, 0,
	51, 0,
	52, 0,
	53, 0,
	-2, 57,
	-1, 138,
	48, 0,
	49, 0,
	50, 0,
	51, 0,
	52, 0,
	53, 0,
	-2, 58,
	-1, 139,
	48, 0,
	49, 0,
	50, 0,
	51, 0,
	52, 0,
	53, 0,
	-2, 59,
	-1, 140,
	48, 0,
	49, 0,
	50, 0,
	51, 0,
	52, 0,
	53, 0,
	-2, 60,
	-1, 141,
	48, 0,
	49, 0,
	50, 0,
	51, 0,
	52, 0,
	53, 0,
	-2, 61,
	-1, 146,
	59, 0,
	-2, 69,
}

const yyPrivate = 57344

const yyLast = 1371

var yyAct = [...]int16{
	122, 26, 179, 176, 25, 161, 17, 121, 92, 160,
	180, 28, 204, 203, 2, 245, 170, 114, 53, 54,
	48, 72, 22, 92, 92, 130, 93, 27, 60, 273,
	44, 51, 268, 255, 50, 230, 304, 171, 177, 305,
	96, 97, 93, 52, 76, 169, 57, 104, 86, 87,
	88, 89, 84, 85, 80, 81, 82, 83, 145, 94,
	115, 124, 90, 91, 86, 87, 88, 89, 84, 85,
	80, 81, 82, 83, 94, 94, 126, 128, 129, 125,
	106, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 131, 146, 195, 24, 127, 152,
	155, 112, 217, 147, 55, 102, 75, 74, 289, 157,
	300, 159, 162, 92, 163, 164, 162, 172, 162, 165,
	168, 167, 102, 158, 92, 166, 197, 181, 173, 174,
	92, 93, 226, 227, 252, 250, 113, 236, 251, 232,
	209, 190, 93, 302, 101, 92, 286, 108, 93, 192,
	210, 90, 91, 86, 87, 88, 89, 84, 85, 80,
	81, 82, 83, 93, 94, 102, 107, 211, 110, 186,
	111, 185, 23, 202, 116, 94, 80, 81, 82, 83,
	58, 94, 78, 216, 78, 73, 228, 229, 212, 258,
	231, 233, 215, 82, 83, 235, 94, 77, 20, 213,
	10, 208, 11, 12, 240, 241, 207, 239, 162, 23,
	78, 238, 214, 56, 182, 247, 243, 249, 205, 201,
	246, 181, 117, 200, 248, 24, 27, 13, 14, 15,
	16, 201, 4, 257, 19, 18, 201, 260, 261, 120,
	8, 199, 198, 265, 191, 183, 109, 105, 103, 95,
	70, 270, 272, 126, 182, 182, 271, 182, 182, 267,
	71, 269, 275, 278, 266, 178, 262, 282, 256, 92,
	244, 274, 119, 118, 100, 175, 291, 21, 279, 280,
	225, 288, 224, 92, 287, 223, 296, 93, 298, 126,
	299, 222, 297, 221, 220, 284, 219, 218, 285, 184,
	45, 93, 196, 156, 154, 99, 306, 90, 91, 86,
	87, 88, 89, 84, 85, 80, 81, 82, 83, 151,
	94, 90, 91, 86, 87, 88, 89, 84, 85, 80,
	81, 82, 83, 92, 94, 98, 38, 37, 36, 35,
	34, 33, 9, 7, 6, 307, 5, 92, 3, 1,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 303,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 90, 91, 86, 87, 88, 89, 84, 85, 80,
	81, 82, 83, 0, 94, 90, 91, 86, 87, 88,
	89, 84, 85, 80, 81, 82, 83, 92, 94, 65,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 301,
	23, 92, 0, 0, 0, 93, 0, 0, 0, 61,
	62, 63, 64, 66, 67, 69, 0, 0, 68, 93,
	0, 0, 0, 0, 0, 90, 91, 86, 87, 88,
	89, 84, 85, 80, 81, 82, 83, 0, 94, 90,
	91, 86, 87, 88, 89, 84, 85, 80, 81, 82,
	83, 292, 94, 0, 92, 242, 0, 0, 0, 65,
	0, 0, 0, 0, 0, 281, 0, 0, 92, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 61,
	62, 63, 64, 66, 67, 69, 93, 0, 68, 0,
	0, 0, 90, 91, 86, 87, 88, 89, 84, 85,
	80, 81, 82, 83, 0, 94, 90, 91, 86, 87,
	88, 89, 84, 85, 80, 81, 82, 83, 277, 94,
	65, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 0, 0, 0, 92, 0, 0, 0, 93,
	61, 62, 63, 64, 66, 67, 69, 276, 0, 68,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 90,
	91, 86, 87, 88, 89, 84, 85, 80, 81, 82,
	83, 0, 94, 90, 91, 86, 87, 88, 89, 84,
	85, 80, 81, 82, 83, 264, 94, 237, 0, 92,
	0, 65, 0, 0, 0, 0, 0, 0, 0, 263,
	0, 0, 0, 92, 0, 0, 0, 93, 0, 0,
	0, 61, 62, 63, 64, 66, 67, 69, 0, 0,
	68, 93, 0, 0, 0, 0, 0, 90, 91, 86,
	87, 88, 89, 84, 85, 80, 81, 82, 83, 0,
	94, 90, 91, 86, 87, 88, 89, 84, 85, 80,
	81, 82, 83, 92, 94, 65, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 0, 92, 254, 0,
	0, 93, 0, 0, 0, 61, 62, 63, 64, 66,
	67, 69, 0, 0, 68, 93, 0, 0, 0, 0,
	0, 90, 91, 86, 87, 88, 89, 84, 85, 80,
	81, 82, 83, 0, 94, 90, 91, 86, 87, 88,
	89, 84, 85, 80, 81, 82, 83, 0, 94, 92,
	253, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	234, 0, 0, 92, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 90, 91, 86,
	87, 88, 89, 84, 85, 80, 81, 82, 83, 92,
	94, 90, 91, 86, 87, 88, 89, 84, 85, 80,
	81, 82, 83, 92, 94, 0, 194, 93, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 90, 91, 86,
	87, 88, 89, 84, 85, 80, 81, 82, 83, 0,
	94, 90, 91, 86, 87, 88, 89, 84, 85, 80,
	81, 82, 83, 0, 94, 92, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	187, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 90, 91, 86, 87, 88, 89, 84,
	85, 80, 81, 82, 83, 0, 94, 90, 91, 86,
	87, 88, 89, 84, 85, 80, 81, 82, 83, 0,
	94, 149, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 0, 0, 0, 92, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	90, 91, 86, 87, 88, 89, 84, 85, 80, 81,
	82, 83, 0, 94, 90, 91, 86, 87, 88, 89,
	84, 85, 80, 81, 82, 83, 123, 94, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 92, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 90, 91,
	86, 87, 88, 89, 84, 85, 80, 81, 82, 83,
	0, 94, 90, 91, 86, 87, 88, 89, 84, 85,
	80, 81, 82, 83, 42, 94, 40, 0, 41, 0,
	39, 0, 0, 0, 29, 30, 31, 32, 0, 49,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 43, 0, 50, 27, 47, 0, 93,
	0, 0, 0, 0, 52, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 46, 90,
	91, 86, 87, 88, 89, 84, 85, 80, 81, 82,
	83, 0, 94, 42, 153, 40, 0, 41, 0, 39,
	0, 0, 0, 29, 30, 31, 32, 0, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 43, 0, 50, 42, 47, 40, 0, 41,
	150, 39, 0, 52, 0, 29, 30, 31, 32, 0,
	49, 0, 0, 0, 0, 0, 0, 46, 0, 0,
	0, 0, 0, 51, 43, 0, 50, 42, 47, 40,
	0, 41, 0, 39, 0, 52, 0, 29, 30, 31,
	32, 0, 49, 0, 73, 0, 0, 0, 0, 46,
	0, 0, 0, 0, 0, 51, 43, 0, 50, 42,
	47, 40, 0, 41, 0, 39, 0, 52, 0, 29,
	30, 31, 32, 0, 49, 294, 0, 0, 0, 0,
	10, 46, 11, 12, 0, 0, 293, 51, 43, 23,
	50, 10, 47, 11, 12, 0, 0, 0, 0, 52,
	23, 0, 0, 0, 0, 24, 27, 13, 14, 15,
	16, 0, 4, 46, 19, 18, 24, 27, 13, 14,
	15, 16, 290, 4, 0, 19, 18, 10, 0, 11,
	12, 0, 0, 283, 0, 0, 23, 0, 10, 0,
	11, 12, 0, 0, 0, 0, 0, 23, 0, 0,
	0, 0, 24, 27, 13, 14, 15, 16, 0, 4,
	0, 19, 18, 24, 27, 13, 14, 15, 16, 206,
	4, 0, 19, 18, 10, 0, 11, 12, 0, 0,
	188, 0, 0, 23, 0, 10, 0, 11, 12, 0,
	0, 0, 0, 0, 23, 0, 0, 0, 0, 24,
	27, 13, 14, 15, 16, 0, 4, 0, 19, 18,
	24, 27, 13, 14, 15, 16, 0, 4, 0, 19,
	18,
}

var yyPact = [...]int16{
	-1000, -1000, 190, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1205, 153, 153, 69, 62, -1, 165, 522, 244, 62,
	1173, 81, 80, -1, -1000, -1000, 189, -1000, 986, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 243, 1205,
	1205, -1000, -1000, 270, 138, 242, 1205, 241, -1000, -1,
	-1000, -1000, -1000, 146, 127, 240, 164, 95, -24, 1205,
	156, -1000, -1000, -1000, -1000, 213, 269, 268, 233, -1000,
	1205, -1000, 972, 26, -9, -9, -1000, 1205, -11, -1000,
	1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
	1205, 1205, 1205, 23, 1205, 1205, 918, 904, 1141, 1109,
	-1000, 1205, -1, 1205, 116, 153, 78, 153, 153, 153,
	-1000, 153, 1205, 10, -19, 1053, 1205, 657, 657, 3,
	391, 238, 1053, -1000, -1000, -1000, 163, -1000, 161, 851,
	-1000, 1325, 137, 137, 116, 116, 122, 122, 122, 122,
	122, 122, 0, 0, 837, 117, -1000, 237, 1205, -1000,
	-1000, -1000, 785, -1000, -1000, 771, 91, 235, -1000, 234,
	216, -1000, 657, -46, -47, 211, 1314, 199, 194, -1000,
	-1000, -1000, 1053, -1000, 119, 145, -1000, 657, 192, -1000,
	-1000, 657, 1205, -1000, 97, 1205, 1205, 8, 179, 115,
	1205, -1000, 735, -1000, 1205, -1000, -1000, 112, -1000, -1000,
	593, 153, -1000, 1205, 1205, 461, -1000, 266, -26, 657,
	-1000, 3, -1000, 657, 391, -1000, 1053, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 110, 113, 721, 669,
	-2, 264, 1205, 15, 178, 655, 1205, 1205, 262, -1000,
	605, 591, 1205, 260, -1000, -3, 256, -1000, -1000, -1000,
	1205, 1040, -6, -1000, 8, -1000, -1000, 15, 258, -1000,
	537, 523, 1205, -1000, -1000, 470, 1205, 1278, -1000, -1000,
	275, 126, 261, 83, 1267, 1205, -1000, -1000, 456, 1231,
	1220, -1000, 403, -1000, -1000, 1205, -1000, 1040, -1000, 1205,
	-1000, 105, -1000, -1000, -1000, -1000, 389, 123, 339, 16,
	-1000, -1000, -1000, -1000, -1000, 1205, 325, -1000,
}

var yyPgo = [...]int16{
	0, 349, 14, 348, 346, 344, 343, 240, 342, 0,
	6, 9, 10, 198, 30, 7, 341, 340, 339, 338,
	337, 336, 335, 319, 305, 304, 303, 302, 300, 5,
	299, 297, 296, 294, 293, 291, 285, 282, 280, 4,
	277, 22, 1, 275, 265, 3, 2, 20,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 16, 22, 22,
	23, 17, 24, 24, 25, 18, 26, 26, 27, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	15, 15, 15, 20, 21, 21, 11, 11, 11, 29,
	29, 4, 4, 5, 6, 7, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 31, 32, 33, 34, 35,
	36, 37, 38, 8, 8, 40, 40, 39, 41, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 43, 43,
	43, 45, 44, 44, 44, 46, 46, 47, 47, 47,
	10, 13, 13, 14, 14, 28, 42, 42,
}

var yyR2 = [...]int8{
	0, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	5, 9, 9, 9, 8, 9, 5, 8, 2, 5,
	4, 7, 2, 4, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 9, 3, 3, 0, 2,
	2, 3, 0, 2, 4, 4, 0, 2, 4, 4,
	4, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 4, 6, 3, 5, 3,
	0, 3, 1, 1, 7, 8, 0, 3, 1, 1,
	2, 3, 4, 4, 2, 5, 0, 2, 2, 2,
	2, 2, 2, 2, 2, 4, 6, 4, 6, 6,
	8, 4, 6, 1, 3, 1, 3, 4, 6, 1,
	1, 1, 1, 3, 6, 4, 5, 1, 0, 3,
	1, 2, 0, 3, 1, 1, 2, 1, 1, 1,
	2, 1, 3, 1, 3, 2, 1, 3,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, 42, -4, -5, -6, -7, -8,
	10, 12, 13, 37, 38, 39, 40, -10, 45, 44,
	-13, -40, -41, 19, 35, -39, -42, 36, -9, 14,
	15, 16, 17, -16, -17, -18, -19, -20, -21, 10,
	6, 8, 4, 33, -14, -28, 58, 37, -47, 19,
	35, 32, 44, -10, -10, 35, -13, -14, 15, 18,
	-12, 28, 29, 30, 31, 8, 32, 33, 37, 34,
	6, -7, -9, 21, 26, 26, -47, 8, 21, 4,
	54, 55, 56, 57, 52, 53, 48, 49, 50, 51,
	46, 47, 8, 26, 59, 6, -9, -9, -22, -24,
	4, 6, 27, 6, -9, 6, -14, 20, 20, 6,
	4, 6, 6, 41, 41, -9, 18, 9, 4, 4,
	6, -15, -9, 4, 35, -39, -42, -41, -42, -9,
	36, -2, -9, -9, -9, -9, -9, -9, -9, -9,
	-9, -9, -9, -9, -9, 35, -9, -15, 4, 7,
	9, -23, -9, 5, -25, -9, -26, -15, -47, -15,
	-11, -29, -10, -10, -10, -11, -2, -11, -15, 35,
	35, 56, -9, -12, -12, -43, -45, 35, -44, -46,
	-12, -10, 20, 7, -30, 8, 8, 9, 5, 9,
	24, 7, -9, 20, 25, 5, -27, 35, 7, 7,
	7, 20, -12, 59, 59, 7, 5, 7, 7, 21,
	5, 22, -12, 7, 20, -12, -9, 5, -31, -32,
	-33, -34, -35, -36, -37, -38, 35, 36, -9, -9,
	27, 11, 24, -9, 5, -9, 25, 4, -12, -29,
	-9, -9, 4, -12, 4, 41, -12, -45, -12, -46,
	25, 25, 21, 9, 9, 35, 4, -9, 11, 20,
	-9, -9, 4, 4, 4, -9, 4, -2, 35, 5,
	-9, -39, -9, 35, -2, 4, 20, 5, -9, -2,
	-2, 5, -9, 5, 20, 23, 20, 23, 20, 25,
	5, -9, 5, 5, 5, 5, -9, -39, -9, -9,
	5, 20, 20, 20, 20, 23, -9, 20,
}

var yyDef = [...]int16{
	2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 131, 105, 0, 136, 0, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 0,
	0, 38, 42, 0, 0, 73, 0, 0, 133, 0,
	127, 128, 129, 0, 0, 0, 0, 18, 22, 0,
	0, 109, 110, 111, 112, 0, 0, 0, 0, 117,
	70, 84, 0, 0, 0, 0, 130, 0, 0, 2,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 70, 0, 0, 0, 0,
	46, 70, 0, 70, 64, 76, 135, 0, 0, 76,
	2, 76, 70, 0, 0, 81, 0, 0, 0, 118,
	122, 0, 72, 86, 132, 106, 0, 104, 0, 0,
	137, 0, 52, 53, 54, 55, -2, -2, -2, -2,
	-2, -2, 62, 63, 0, 67, -2, 0, 0, 36,
	37, 39, 0, 41, 43, 0, 0, 0, 134, 0,
	0, 78, 79, 0, 0, 0, 0, 0, 0, 20,
	23, 24, 82, 113, 0, 0, 120, 0, 0, 124,
	125, 0, 0, 83, 0, 0, 0, 107, 10, 65,
	0, 51, 0, 40, 0, 45, 47, 0, 49, 50,
	0, 0, 80, 0, 0, 0, 16, 0, 19, 0,
	115, 0, 121, 0, 0, 126, 71, 85, 87, 88,
	89, 90, 91, 92, 93, 94, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 2, 0, 0, 119, 116, 123,
	0, 0, 0, 107, 0, 108, 2, 66, 0, 44,
	0, 0, 0, 2, 2, 0, 0, 0, 21, 114,
	0, 0, 0, 0, 0, 0, 48, 74, 0, 0,
	0, 14, 0, 17, 95, 0, 97, 0, 101, 0,
	11, 0, 75, 12, 13, 15, 0, 0, 0, 0,
	35, 96, 98, 102, 99, 0, 0, 100,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{
	{270, 5, errstrParseExpectingComma},
	{270, 5, errstrParseExpectingComma},
	{270, 5, errstrParseExpectingComma},
	{270, 5, errstrParseExpectingComma},
	{17, 52, errstrParseAdditionalEquals},
	{17, 52, errstrParseAdditionalEquals},
	{17, 52, errstrParseAdditionalEquals},
	{17, 52, errstrParseAdditionalEquals},
}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:140
		{
			posLast(yylex, yyDollar) // our pos
			// store the AST in the struct that we previously passed in
			lp := cast(yylex)
			lp.ast = yyDollar[1].stmt
			// this is equivalent to:
			//lp := yylex.(*Lexer).parseResult
			//lp.(*lexParseAST).ast = $1.stmt
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:152
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.stmt = &ast.StmtProg{
				Body: []interfaces.Stmt{},
			}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:159
		{
			posLast(yylex, yyDollar) // our pos
			// TODO: should we just skip comments for now?
			//if _, ok := $2.stmt.(*ast.StmtComment); !ok {
			//}
			if stmt, ok := yyDollar[1].stmt.(*ast.StmtProg); ok {
				stmts := stmt.Body
				stmts = append(stmts, yyDollar[2].stmt)
				yyVAL.stmt = &ast.StmtProg{
					Body: stmts,
				}
				locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:176
		{
			yyVAL.stmt = &ast.StmtComment{
				Value: yyDollar[1].str,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:183
		{
			yyVAL.stmt = yyDollar[1].stmt
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:188
		{
			yyVAL.stmt = yyDollar[1].stmt
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:193
		{
			yyVAL.stmt = yyDollar[1].stmt
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:198
		{
			yyVAL.stmt = yyDollar[1].stmt
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:203
		{
			yyVAL.stmt = yyDollar[1].stmt
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 10:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:208
		{
			yyVAL.stmt = &ast.StmtIf{
				Condition:  yyDollar[2].expr,
				ThenBranch: yyDollar[4].stmt,
				//ElseBranch: nil,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 11:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:217
		{
			yyVAL.stmt = &ast.StmtIf{
				Condition:  yyDollar[2].expr,
				ThenBranch: yyDollar[4].stmt,
				ElseBranch: yyDollar[8].stmt,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 12:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:228
		{
			yyVAL.stmt = &ast.StmtFor{
				Index: yyDollar[2].str,  // no $ prefix
				Value: yyDollar[4].str,  // no $ prefix
				Expr:  yyDollar[6].expr, // XXX: name this List ?
				Body:  yyDollar[8].stmt,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 13:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:240
		{
			yyVAL.stmt = &ast.StmtForKV{
				Key:  yyDollar[2].str,  // no $ prefix
				Val:  yyDollar[4].str,  // no $ prefix
				Expr: yyDollar[6].expr, // XXX: name this Map ?
				Body: yyDollar[8].stmt,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 14:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:254
		{
			yyVAL.stmt = &ast.StmtFunc{
				Name: yyDollar[2].str,
				Func: &ast.ExprFunc{
					Title:  yyDollar[2].str,
					Args:   yyDollar[4].args,
					Return: nil,
					Body:   yyDollar[7].expr,
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 15:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:268
		{
			fn := &ast.ExprFunc{
				Title:  yyDollar[2].str,
				Args:   yyDollar[4].args,
				Return: yyDollar[6].typ, // return type is known
				Body:   yyDollar[8].expr,
			}
			isFullyTyped := yyDollar[6].typ != nil // true if set
			m := make(map[string]*types.Type)
			ord := []string{}
			for _, a := range yyDollar[4].args {
				if a.Type == nil {
					// at least one is unknown, can't run SetType...
					isFullyTyped = false
					break
				}
				m[a.Name] = a.Type
				ord = append(ord, a.Name)
			}
			var typ *types.Type
			if isFullyTyped {
				typ = &types.Type{
					Kind: types.KindFunc,
					Map:  m,
					Ord:  ord,
					Out:  yyDollar[6].typ,
				}
				// XXX: We might still need to do this for now...
				if err := fn.SetType(typ); err != nil {
					// this will ultimately cause a parser error to occur...
					yylex.Error(fmt.Sprintf("%s: %+v", ErrParseSetType, err))
				}
			}
			yyVAL.stmt = &ast.StmtFunc{
				Name: yyDollar[2].str,
				Func: fn,
				Type: typ, // sam says add the type here instead...
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 16:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:310
		{
			yyVAL.stmt = &ast.StmtClass{
				Name: yyDollar[2].str,
				Args: nil,
				Body: yyDollar[4].stmt,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 17:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:321
		{
			yyVAL.stmt = &ast.StmtClass{
				Name: yyDollar[2].str,
				Args: yyDollar[4].args,
				Body: yyDollar[7].stmt,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:331
		{
			yyVAL.stmt = &ast.StmtInclude{
				Name: yyDollar[2].str,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 19:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:339
		{
			yyVAL.stmt = &ast.StmtInclude{
				Name: yyDollar[2].str,
				Args: yyDollar[4].exprs,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:349
		{
			yyVAL.stmt = &ast.StmtInclude{
				Name:  yyDollar[2].str,
				Alias: yyDollar[4].str,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 21:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:359
		{
			yyVAL.stmt = &ast.StmtInclude{
				Name:  yyDollar[2].str,
				Args:  yyDollar[4].exprs,
				Alias: yyDollar[7].str,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:369
		{
			yyVAL.stmt = &ast.StmtImport{
				Name: yyDollar[2].str,
				//Alias: "",
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:378
		{
			yyVAL.stmt = &ast.StmtImport{
				Name:  yyDollar[2].str,
				Alias: yyDollar[4].str,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:387
		{
			yyVAL.stmt = &ast.StmtImport{
				Name:  yyDollar[2].str,
				Alias: yyDollar[4].str,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:405
		{
			yyVAL.expr = &ast.ExprBool{
				V: yyDollar[1].bool,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:412
		{
			yyVAL.expr = &ast.ExprStr{
				V: yyDollar[1].str,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:419
		{
			yyVAL.expr = &ast.ExprInt{
				V: yyDollar[1].int,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:426
		{
			yyVAL.expr = &ast.ExprFloat{
				V: yyDollar[1].float,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:433
		{
			// TODO: list could be squashed in here directly...
			yyVAL.expr = yyDollar[1].expr
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:439
		{
			// TODO: map could be squashed in here directly...
			yyVAL.expr = yyDollar[1].expr
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:445
		{
			// TODO: struct could be squashed in here directly...
			yyVAL.expr = yyDollar[1].expr
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:451
		{
			// TODO: call could be squashed in here directly...
			yyVAL.expr = yyDollar[1].expr
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:457
		{
			// TODO: var could be squashed in here directly...
			yyVAL.expr = yyDollar[1].expr
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:463
		{
			// TODO: var could be squashed in here directly...
			yyVAL.expr = yyDollar[1].expr
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser/parser.y:469
		{
			yyVAL.expr = &ast.ExprIf{
				Condition:  yyDollar[2].expr,
				ThenBranch: yyDollar[4].expr,
				ElseBranch: yyDollar[8].expr,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:479
		{
			yyVAL.expr = yyDollar[2].expr
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:487
		{
			yyVAL.expr = &ast.ExprList{
				Elements: yyDollar[2].exprs,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 38:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:496
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.exprs = []interfaces.Expr{}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:501
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[2].expr)
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:508
		{
			yyVAL.expr = yyDollar[1].expr
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:516
		{
			yyVAL.expr = &ast.ExprMap{
				KVs: yyDollar[2].mapKVs,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:525
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.mapKVs = []*ast.ExprMapKV{}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:530
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.mapKVs = append(yyDollar[1].mapKVs, yyDollar[2].mapKV)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:537
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.mapKV = &ast.ExprMapKV{
				Key: yyDollar[1].expr,
				Val: yyDollar[3].expr,
			}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:548
		{
			yyVAL.expr = &ast.ExprStruct{
				Fields: yyDollar[3].structFields,
			}
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:556
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.structFields = []*ast.ExprStructField{}
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:561
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.structFields = append(yyDollar[1].structFields, yyDollar[2].structField)
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:568
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.structField = &ast.ExprStructField{
				Name:  yyDollar[1].str,
				Value: yyDollar[3].expr,
			}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:580
		{
			yyVAL.expr = &ast.ExprCall{
				Name: yyDollar[1].str,
				Args: yyDollar[3].exprs,
				//Var: false, // default
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:591
		{
			yyVAL.expr = &ast.ExprCall{
				Name: yyDollar[1].str,
				Args: yyDollar[3].exprs,
				// Instead of `Var: true`, we could have added a `$`
				// prefix to the Name, but I felt this was more elegant.
				Var: true, // lambda
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:603
		{
			yyVAL.expr = &ast.ExprCall{
				Name: "", // anonymous!
				Args: yyDollar[3].exprs,
				Anon: yyDollar[1].expr,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:612
		{
			yyVAL.expr = &ast.ExprCall{
				Name: operators.OperatorFuncName,
				Args: []interfaces.Expr{
					&ast.ExprStr{ // operator first
						V: yyDollar[2].str, // for PLUS this is a `+` character
					},
					yyDollar[1].expr,
					yyDollar[3].expr,
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:626
		{
			yyVAL.expr = &ast.ExprCall{
				Name: operators.OperatorFuncName,
				Args: []interfaces.Expr{
					&ast.ExprStr{ // operator first
						V: yyDollar[2].str,
					},
					yyDollar[1].expr,
					yyDollar[3].expr,
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:640
		{
			yyVAL.expr = &ast.ExprCall{
				Name: operators.OperatorFuncName,
				Args: []interfaces.Expr{
					&ast.ExprStr{ // operator first
						V: yyDollar[2].str,
					},
					yyDollar[1].expr,
					yyDollar[3].expr,
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:654
		{
			yyVAL.expr = &ast.ExprCall{
				Name: operators.OperatorFuncName,
				Args: []interfaces.Expr{
					&ast.ExprStr{ // operator first
						V: yyDollar[2].str,
					},
					yyDollar[1].expr,
					yyDollar[3].expr,
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:668
		{
			yyVAL.expr = &ast.ExprCall{
				Name: operators.OperatorFuncName,
				Args: []interfaces.Expr{
					&ast.ExprStr{ // operator first
						V: yyDollar[2].str,
					},
					yyDollar[1].expr,
					yyDollar[3].expr,
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:682
		{
			yyVAL.expr = &ast.ExprCall{
				Name: operators.OperatorFuncName,
				Args: []interfaces.Expr{
					&ast.ExprStr{ // operator first
						V: yyDollar[2].str,
					},
					yyDollar[1].expr,
					yyDollar[3].expr,
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:696
		{
			yyVAL.expr = &ast.ExprCall{
				Name: operators.OperatorFuncName,
				Args: []interfaces.Expr{
					&ast.ExprStr{ // operator first
						V: yyDollar[2].str,
					},
					yyDollar[1].expr,
					yyDollar[3].expr,
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:710
		{
			yyVAL.expr = &ast.ExprCall{
				Name: operators.OperatorFuncName,
				Args: []interfaces.Expr{
					&ast.ExprStr{ // operator first
						V: yyDollar[2].str,
					},
					yyDollar[1].expr,
					yyDollar[3].expr,
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:724
		{
			yyVAL.expr = &ast.ExprCall{
				Name: operators.OperatorFuncName,
				Args: []interfaces.Expr{
					&ast.ExprStr{ // operator first
						V: yyDollar[2].str,
					},
					yyDollar[1].expr,
					yyDollar[3].expr,
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:738
		{
			yyVAL.expr = &ast.ExprCall{
				Name: operators.OperatorFuncName,
				Args: []interfaces.Expr{
					&ast.ExprStr{ // operator first
						V: yyDollar[2].str,
					},
					yyDollar[1].expr,
					yyDollar[3].expr,
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:752
		{
			yyVAL.expr = &ast.ExprCall{
				Name: operators.OperatorFuncName,
				Args: []interfaces.Expr{
					&ast.ExprStr{ // operator first
						V: yyDollar[2].str,
					},
					yyDollar[1].expr,
					yyDollar[3].expr,
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:766
		{
			yyVAL.expr = &ast.ExprCall{
				Name: operators.OperatorFuncName,
				Args: []interfaces.Expr{
					&ast.ExprStr{ // operator first
						V: yyDollar[2].str,
					},
					yyDollar[1].expr,
					yyDollar[3].expr,
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:780
		{
			yyVAL.expr = &ast.ExprCall{
				Name: operators.OperatorFuncName,
				Args: []interfaces.Expr{
					&ast.ExprStr{ // operator first
						V: yyDollar[1].str,
					},
					yyDollar[2].expr,
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:796
		{
			yyVAL.expr = &ast.ExprCall{
				Name: funcs.LookupFuncName,
				Args: []interfaces.Expr{
					yyDollar[1].expr, // the list or map
					yyDollar[3].expr, // the index or key is an expr
					//$6.expr, // the default
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:811
		{
			yyVAL.expr = &ast.ExprCall{
				Name: funcs.LookupDefaultFuncName,
				Args: []interfaces.Expr{
					yyDollar[1].expr, // the list or map
					yyDollar[3].expr, // the index or key is an expr
					yyDollar[6].expr, // the default
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:826
		{
			yyVAL.expr = &ast.ExprCall{
				Name: funcs.StructLookupFuncName,
				Args: []interfaces.Expr{
					yyDollar[1].expr, // the struct
					&ast.ExprStr{
						V: yyDollar[3].str, // the field is always an str
					},
					//$5.expr, // the default
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:843
		{
			yyVAL.expr = &ast.ExprCall{
				Name: funcs.StructLookupOptionalFuncName,
				Args: []interfaces.Expr{
					yyDollar[1].expr, // the struct
					&ast.ExprStr{
						V: yyDollar[3].str, // the field is always an str
					},
					yyDollar[5].expr, // the default
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:857
		{
			yyVAL.expr = &ast.ExprCall{
				Name: funcs.ContainsFuncName,
				Args: []interfaces.Expr{
					yyDollar[1].expr,
					yyDollar[3].expr,
				},
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:872
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.exprs = []interfaces.Expr{}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:878
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:883
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.exprs = append([]interfaces.Expr{}, yyDollar[1].expr)
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:890
		{
			yyVAL.expr = &ast.ExprVar{
				Name: yyDollar[1].str,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser/parser.y:903
		{
			yyVAL.expr = &ast.ExprFunc{
				Args: yyDollar[3].args,
				//Return: nil,
				Body: yyDollar[6].expr,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 75:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:913
		{
			yyVAL.expr = &ast.ExprFunc{
				Args:   yyDollar[3].args,
				Return: yyDollar[5].typ, // return type is known
				Body:   yyDollar[7].expr,
			}
			isFullyTyped := yyDollar[5].typ != nil // true if set
			m := make(map[string]*types.Type)
			ord := []string{}
			for _, a := range yyDollar[3].args {
				if a.Type == nil {
					// at least one is unknown, can't run SetType...
					isFullyTyped = false
					break
				}
				m[a.Name] = a.Type
				ord = append(ord, a.Name)
			}
			if isFullyTyped {
				typ := &types.Type{
					Kind: types.KindFunc,
					Map:  m,
					Ord:  ord,
					Out:  yyDollar[5].typ,
				}
				if err := yyVAL.expr.SetType(typ); err != nil {
					// this will ultimately cause a parser error to occur...
					yylex.Error(fmt.Sprintf("%s: %+v", ErrParseSetType, err))
				}
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.expr)
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:948
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.args = []*interfaces.Arg{}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:953
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].arg)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:958
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.args = append([]*interfaces.Arg{}, yyDollar[1].arg)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:966
		{
			yyVAL.arg = &interfaces.Arg{
				Name: yyDollar[1].str,
			}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:973
		{
			yyVAL.arg = &interfaces.Arg{
				Name: yyDollar[1].str,
				Type: yyDollar[2].typ,
			}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:983
		{
			yyVAL.stmt = &ast.StmtBind{
				Ident: yyDollar[1].str,
				Value: yyDollar[3].expr,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:993
		{
			var expr interfaces.Expr = yyDollar[4].expr
			// XXX: We still need to do this for now it seems...
			if err := expr.SetType(yyDollar[2].typ); err != nil {
				// this will ultimately cause a parser error to occur...
				yylex.Error(fmt.Sprintf("%s: %+v", ErrParseSetType, err))
			}
			yyVAL.stmt = &ast.StmtBind{
				Ident: yyDollar[1].str,
				Value: expr,
				Type:  yyDollar[2].typ, // sam says add the type here instead...
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1015
		{
			call := &ast.ExprCall{
				Name: yyDollar[1].str, // the function name
				Args: yyDollar[3].exprs,
				//Var: false, // default
			}
			name := &ast.ExprStr{
				V: yyDollar[1].str, // any constant, non-empty name
			}
			res := &ast.StmtRes{
				Kind:     interfaces.PanicResKind,
				Name:     name,
				Contents: []ast.StmtResContents{},
			}
			yyVAL.stmt = &ast.StmtIf{
				Condition:  call,
				ThenBranch: res,
				//ElseBranch: nil,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1042
		{
			// A "collect" stmt is exactly a regular "res" statement, except
			// it has the boolean "Collect" field set to true, and it also
			// has a special "resource body" entry which accepts the special
			// collected data from the function graph.
			yyVAL.stmt = yyDollar[2].stmt // it's us now
			kind := yyDollar[2].stmt.(*ast.StmtRes).Kind
			res := yyVAL.stmt.(*ast.StmtRes)
			res.Collect = true
			// We are secretly adding a special field to the res contents,
			// which receives all of the exported data so that we have it
			// arrive in our function graph in the standard way. We'd need
			// to have this data to be able to build the resources we want!
			call := &ast.ExprCall{
				// function name to lookup special values from that kind
				Name: funcs.CollectFuncName,
				Args: []interfaces.Expr{
					&ast.ExprStr{ // magic operator first
						V: kind, // tell it what we're reading
					},
					// names to collect
					// XXX: Can we copy the same AST nodes to here?
					// XXX: Do I need to run .Copy() on them ?
					// str, []str, or []struct{name str; host str}
					res.Name, // expr (hopefully one of those types)
				},
			}
			collect := &ast.StmtResCollect{ // special field
				Kind:  kind, // might as well tell it directly
				Value: call,
			}
			res.Contents = append(res.Contents, collect)
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1096
		{
			yyVAL.stmt = &ast.StmtRes{
				Kind:     yyDollar[1].str,
				Name:     yyDollar[2].expr,
				Contents: yyDollar[4].resContents,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1107
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.resContents = []ast.StmtResContents{}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1112
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.resContents = append(yyDollar[1].resContents, yyDollar[2].resField)
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1117
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.resContents = append(yyDollar[1].resContents, yyDollar[2].resField)
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1122
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.resContents = append(yyDollar[1].resContents, yyDollar[2].resEdge)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1127
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.resContents = append(yyDollar[1].resContents, yyDollar[2].resEdge)
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1132
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.resContents = append(yyDollar[1].resContents, yyDollar[2].resMeta)
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1137
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.resContents = append(yyDollar[1].resContents, yyDollar[2].resMeta)
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1142
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.resContents = append(yyDollar[1].resContents, yyDollar[2].resMeta)
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1147
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.resContents = append(yyDollar[1].resContents, yyDollar[2].resMeta)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1154
		{
			yyVAL.resField = &ast.StmtResField{
				Field: yyDollar[1].str,
				Value: yyDollar[3].expr,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.resField)
		}
	case 96:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1165
		{
			yyVAL.resField = &ast.StmtResField{
				Field:     yyDollar[1].str,
				Value:     yyDollar[5].expr,
				Condition: yyDollar[3].expr,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.resField)
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1177
		{
			yyVAL.resEdge = &ast.StmtResEdge{
				Property: yyDollar[1].str,
				EdgeHalf: yyDollar[3].edgeHalf,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.resEdge)
		}
	case 98:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1188
		{
			yyVAL.resEdge = &ast.StmtResEdge{
				Property:  yyDollar[1].str,
				EdgeHalf:  yyDollar[5].edgeHalf,
				Condition: yyDollar[3].expr,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.resEdge)
		}
	case 99:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1200
		{
			if strings.ToLower(yyDollar[1].str) != strings.ToLower(ast.MetaField) {
				// this will ultimately cause a parser error to occur...
				yylex.Error(fmt.Sprintf("%s: %s", ErrParseResFieldInvalid, yyDollar[1].str))
			}
			yyVAL.resMeta = &ast.StmtResMeta{
				Property: yyDollar[3].str,
				MetaExpr: yyDollar[5].expr,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.resMeta)
		}
	case 100:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser/parser.y:1215
		{
			posLast(yylex, yyDollar) // our pos
			if strings.ToLower(yyDollar[1].str) != strings.ToLower(ast.MetaField) {
				// this will ultimately cause a parser error to occur...
				yylex.Error(fmt.Sprintf("%s: %s", ErrParseResFieldInvalid, yyDollar[1].str))
			}
			yyVAL.resMeta = &ast.StmtResMeta{
				Property:  yyDollar[3].str,
				MetaExpr:  yyDollar[7].expr,
				Condition: yyDollar[5].expr,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.resMeta)
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1232
		{
			if strings.ToLower(yyDollar[1].str) != strings.ToLower(ast.MetaField) {
				// this will ultimately cause a parser error to occur...
				yylex.Error(fmt.Sprintf("%s: %s", ErrParseResFieldInvalid, yyDollar[1].str))
			}
			yyVAL.resMeta = &ast.StmtResMeta{
				Property: yyDollar[1].str,
				MetaExpr: yyDollar[3].expr,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.resMeta)
		}
	case 102:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1247
		{
			if strings.ToLower(yyDollar[1].str) != strings.ToLower(ast.MetaField) {
				// this will ultimately cause a parser error to occur...
				yylex.Error(fmt.Sprintf("%s: %s", ErrParseResFieldInvalid, yyDollar[1].str))
			}
			yyVAL.resMeta = &ast.StmtResMeta{
				Property:  yyDollar[1].str,
				MetaExpr:  yyDollar[5].expr,
				Condition: yyDollar[3].expr,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.resMeta)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1265
		{
			yyVAL.stmt = &ast.StmtEdge{
				EdgeHalfList: yyDollar[1].edgeHalfList,
				//Notify: false, // unused here
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1274
		{
			yyVAL.stmt = &ast.StmtEdge{
				EdgeHalfList: []*ast.StmtEdgeHalf{
					yyDollar[1].edgeHalf,
					yyDollar[3].edgeHalf,
				},
				//Notify: false, // unused here, it is implied (i think)
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.stmt)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1287
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.edgeHalfList = []*ast.StmtEdgeHalf{yyDollar[1].edgeHalf}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1292
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.edgeHalfList = append(yyDollar[1].edgeHalfList, yyDollar[3].edgeHalf)
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1300
		{
			yyVAL.edgeHalf = &ast.StmtEdgeHalf{
				Kind: yyDollar[1].str,
				Name: yyDollar[3].expr,
				//SendRecv: "", // unused
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.edgeHalf)
		}
	case 108:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1312
		{
			yyVAL.edgeHalf = &ast.StmtEdgeHalf{
				Kind:     yyDollar[1].str,
				Name:     yyDollar[3].expr,
				SendRecv: yyDollar[6].str,
			}
			locate(yylex, yyDollar[1], yyDollar[len(yyDollar)-1], yyVAL.edgeHalf)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1323
		{
			posLast(yylex, yyDollar)                   // our pos
			yyVAL.typ = types.NewType(yyDollar[1].str) // "bool"
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1328
		{
			posLast(yylex, yyDollar)                   // our pos
			yyVAL.typ = types.NewType(yyDollar[1].str) // "str"
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1333
		{
			posLast(yylex, yyDollar)                   // our pos
			yyVAL.typ = types.NewType(yyDollar[1].str) // "int"
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1338
		{
			posLast(yylex, yyDollar)                   // our pos
			yyVAL.typ = types.NewType(yyDollar[1].str) // "float"
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1344
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.typ = types.NewType("[]" + yyDollar[3].typ.String())
		}
	case 114:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser/parser.y:1350
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.typ = types.NewType(fmt.Sprintf("map{%s: %s}", yyDollar[3].typ.String(), yyDollar[5].typ.String()))
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser/parser.y:1356
		{
			posLast(yylex, yyDollar) // our pos

			names := make(map[string]struct{})
			strs := []string{}
			for _, arg := range yyDollar[3].args {
				s := fmt.Sprintf("%s %s", arg.Name, arg.Type.String())
				if _, exists := names[arg.Name]; exists {
					// duplicate field name used
					err := fmt.Errorf("duplicate struct field of `%s`", s)
					// this will ultimately cause a parser error to occur...
					yylex.Error(fmt.Sprintf("%s: %+v", ErrParseSetType, err))
					break // we must skip, because code continues!
				}
				names[arg.Name] = struct{}{}
				strs = append(strs, s)
			}

			yyVAL.typ = types.NewType(fmt.Sprintf("%s{%s}", yyDollar[1].str, strings.Join(strs, "; ")))
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser/parser.y:1379
		{
			posLast(yylex, yyDollar) // our pos

			m := make(map[string]*types.Type)
			ord := []string{}
			for i, a := range yyDollar[3].args {
				if a.Type == nil {
					// at least one is unknown, can't run SetType...
					// this means there is a programming error here!
					err := fmt.Errorf("type is unspecified for arg #%d", i)
					// this will ultimately cause a parser error to occur...
					yylex.Error(fmt.Sprintf("%s: %+v", ErrParseSetType, err))
					break // safety
				}
				name := a.Name
				if name == "" {
					name = util.NumToAlpha(i) // if unspecified...
				}
				if util.StrInList(name, ord) {
					// duplicate arg name used
					err := fmt.Errorf("duplicate arg name of `%s`", name)
					// this will ultimately cause a parser error to occur...
					yylex.Error(fmt.Sprintf("%s: %+v", ErrParseSetType, err))
					break // safety
				}
				m[name] = a.Type
				ord = append(ord, name)
			}

			yyVAL.typ = &types.Type{
				Kind: types.KindFunc,
				Map:  m,
				Ord:  ord,
				Out:  yyDollar[5].typ,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1416
		{
			posLast(yylex, yyDollar)                   // our pos
			yyVAL.typ = types.NewType(yyDollar[1].str) // "variant"
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1423
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.args = []*interfaces.Arg{}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1428
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].arg)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1433
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.args = append([]*interfaces.Arg{}, yyDollar[1].arg)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1440
		{
			posLast(yylex, yyDollar)     // our pos
			yyVAL.arg = &interfaces.Arg{ // reuse the Arg struct
				Name: yyDollar[1].str,
				Type: yyDollar[2].typ,
			}
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser/parser.y:1450
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.args = []*interfaces.Arg{}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1455
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.args = append(yyDollar[1].args, yyDollar[3].arg)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1460
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.args = append([]*interfaces.Arg{}, yyDollar[1].arg)
			//$$.args = []*interfaces.Arg{$1.arg} // TODO: is this equivalent?
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1469
		{
			yyVAL.arg = &interfaces.Arg{
				Type: yyDollar[1].typ,
			}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1477
		{
			yyVAL.arg = &interfaces.Arg{
				Name: yyDollar[1].str,
				Type: yyDollar[2].typ,
			}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1486
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.str = yyDollar[1].str
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1492
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.str = yyDollar[1].str
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1498
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.str = yyDollar[1].str
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1506
		{
			posLast(yylex, yyDollar)    // our pos
			yyVAL.str = yyDollar[2].str // don't include the leading $
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1514
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.str = yyDollar[1].str
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1520
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.str = yyDollar[1].str + yyDollar[2].str + yyDollar[3].str
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1527
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.str = yyDollar[1].str
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1532
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.str = yyDollar[1].str + interfaces.ModuleSep + yyDollar[3].str
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser/parser.y:1541
		{
			posLast(yylex, yyDollar)    // our pos
			yyVAL.str = yyDollar[2].str // don't include the leading $
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser/parser.y:1548
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.str = yyDollar[1].str
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser/parser.y:1553
		{
			posLast(yylex, yyDollar) // our pos
			yyVAL.str = yyDollar[1].str + yyDollar[2].str + yyDollar[3].str
		}
	}
	goto yystack /* stack new state and value */
}
