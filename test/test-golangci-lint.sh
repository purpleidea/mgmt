#!/bin/bash

# TODO: update make-deps.sh

# print running test
echo running "$0"

command -v golangci-lint --version || { echo >&2 "golangci-lint not found"; exit 1; }

# command -v golangci-lint >/dev/null 2>&1 || { echo >&2 "golangci-lint not found"; exit 1; }

# configure settings for test scripts
ROOT=$(dirname "${BASH_SOURCE}")/..
cd "${ROOT}" # Enter mgmt root
. test/util.sh

failures=''
function run-test()
{
	$@ || failures=$( [ -n "$failures" ] && echo "$failures\\n$@" || echo "$@" )
}


# # -------------------------Maybe----------------------
# Current active linters
# gcl='golangci-lint run -v --disable-all -E goimports -E revive -E misspell --skip-files '${ROOT}'/lang/lexer.nn.go --skip-files '${ROOT}'/lang/y.go --skip-files '${ROOT}'/bindata/bindata.go --skip-files '${ROOT}'/lang/types/kind_stringer.go --skip-files '${ROOT}'/lang/interpolate/parse.generated.go'
# gcl='golangci-lint run -v --disable-all -E goimports -E revive -E misspell --skip-files /lang/lexer.nn.go --skip-files /lang/y.go --skip-files /bindata/bindata.go --skip-files /lang/types/kind_stringer.go --skip-files /lang/interpolate/parse.generated.go'
gcl='golangci-lint run' # Using .golangci.yml config file in ROOT
# # -------------------------Maybe----------------------

# skip_files=("$ROOT/lang/lexer.nn.go" \
# "$ROOT/lang/y.go" \
# "$ROOT/bindata/bindata.go" \
# "$ROOT/lang/types/kind_stringer.go" \
# "$ROOT/lang/interpolate/parse.generated.go" \
# "$ROOT/lang/interpolate/interpolate/parse.generated.go" \
# )

declare -a skip_files=(
    "$ROOT/lang/lexer.nn.go" 
    "$ROOT/lang/y.go" 
    "$ROOT/bindata/bindata.go" 
    "$ROOT/lang/types/kind_stringer.go" 
    "$ROOT/lang/interpolate/parse.generated.go" 
    "$ROOT/lang/interpolate/interpolate/parse.generated.go"
)

# Commented out
# gcl='golangci-lint run --enable aligncheck'
# gcl='golangci-lint run --enable dupl'
# gcl='golangci-lint run --enable errcheck'
# gcl='golangci-lint run --enable gas'
# gcl='golangci-lint run --enable goconst'
# gcl='golangci-lint run --enable gocyclo'
# gcl='golangci-lint run --enable gotype'
# gcl='golangci-lint run --enable unconvert'

# TODO: only a few fixes needed
# gcl='golangci-lint run --enable deadcode'
# gcl='golangci-lint run --enable gosimple'
# gcl='golangci-lint run --enable ineffassign'
# gcl='golangci-lint run --enable interfacer'
# gcl='golangci-lint run --enable lll --line-length=200'
# gcl='golangci-lint run --enable safesql'
# gcl='golangci-lint run --enable staticcheck'
# gcl='golangci-lint run --enable structcheck'
# gcl='golangci-lint run --enable unparam'
# gcl='golangci-lint run --enable unused'
# gcl='golangci-lint run --enable varcheck'

# # -------------------------Maybe----------------------
# # skip autogenerated files
# gcl='golangci-lint run --skip-files '${ROOT}'/lang/lexer.nn.go'
# gcl='golangci-lint run --skip-files '${ROOT}'/lang/y.go'
# gcl='golangci-lint run --skip-files '${ROOT}'/bindata/bindata.go'
# gcl='golangci-lint run --skip-files '${ROOT}'/lang/types/kind_stringer.go'
# gcl='golangci-lint run --skip-files '${ROOT}'/lang/interpolate/parse.generated.go'
# # -------------------------Maybe----------------------


# TODO: lint the *.go examples as individual files and not as a single *.go
# Loop through all .go files except within certain directories (old, tmp, vendor, examples and test)
for dir in `find * -maxdepth 9 -type d -not -path 'old/*' -not -path 'old' -not -path 'tmp/*' -not -path 'tmp' -not -path 'vendor/*' -not -path 'examples/*' -not -path 'test/*' -not -path 'interpolate/*'`; do
	match="$dir/*.go"

	if ! ls $match &>/dev/null; 
    then
		continue	# no *.go files found

    else 
        for i in $match; do
            run_flag="true"

            # --skip-files still runs linter but does not display results
            # skipping the file itself avoids linting
            for file in ${skip_files[@]}; do
                # echo "File is: "$file"" 
                # echo "\$root\$I is $ROOT/$i"

                if ["$ROOT/$i" == "$file"]; 
                then
                    echo "fuck: $match"
                    $run_flag="false"
                    break
                else
                    echo "Nah dude"
                fi
            done

            if $run_flag -eq "true"
            then
        	    run-test $gcl "$i" || fail_test "golangci-lint did not pass"
            else
                continue
            fi

        done
	fi

    # if $run_flag -eq "true"; 
    # then
	#     run-test $gcl "$dir" || fail_test "golangci-lint did not pass"
    # fi

    echo "NEW DIIIIIIR"
done

if [[ -n "$failures" ]]; then
	echo 'FAIL'
	echo 'The following tests have failed:'
	echo -e "$failures"
	echo
	exit 1
fi
echo 'PASS'